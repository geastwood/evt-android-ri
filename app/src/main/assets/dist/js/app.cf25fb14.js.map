{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/utils/bridge.js","webpack:///./src/utils/evtAPI.js","webpack:///./src/utils/bip39API.js","webpack:///./src/main.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","app","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","browser","versions","u","navigator","userAgent","trident","indexOf","presto","webKit","gecko","mobile","match","ios","android","iPhone","iPad","webApp","weixin","toLowerCase","qq","bridge","handle","body","console","log","webkit","messageHandlers","postMessage","content","test","utils_bridge","toStringify","JSON","stringify","toJson","parse","randomPrivateKey","async","lib_default","a","EvtKey","privateToPublic","privateKey","publicKey","seedPrivateKey","seed","isValidPrivateKey","isValidPublicKey","isValidAddress","address","random32BytesAsHex","randomName128","getNullAddress","apiCaller","needPrivateKeyResponse","EVTInit","network","host","port","protocol","endpoint","keyProvider","Promise","res","rej","getInfo","info","getHeadBlockHeaderState","getOwnedTokens","publicKeys","getManagedGroups","getCreatedDomains","getCreatedFungibles","getActions","params","getToken","domain","id","getFungibleBalance","getTransactionDetailById","getDomainDetail","getGroupDetail","getFungibleActionsByAddress","symbolId","skip","take","getTransactionsDetailOfPublicKeys","publickeys","getFungibleSymbolDetail","sym_id","getRequiredKeysForSuspendedTransaction","proposalName","availableKeys","getStatusOfEvtLink","options","getSuspendedTransactionDetail","getEstimatedChargeForTransaction","newdomain","json","config","EvtAction","generateUnsignedTransaction","pushTransaction","getUniqueLinkId","EvtLink","getEVTLinkQrImage","qrType","qrParams","imgParams","err","e","message","dataUrl","parseEvtLink","text","getEvtLinkForEveriPass","getEvtLinkForEveriPay","getEvtLinkForPayeeCode","generateMnemonic","bip39_default","words","mnemonicToSeedHex","mnemonicToSeed","password","validateMnemonic","mnemonic","entropyToMnemonic","str","mnemonicToEntropy","createEVTWallet","entropy","substring","mnemoinc","type","importEVTWallet"],"mappings":"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","file":"js/app.cf25fb14.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","/**\n * Created by Administrator on 2018/12/5.\n */\nconst browser = {\n  versions: function () {\n    var u = navigator.userAgent;\n    return {\n      trident: u.indexOf('Trident') > -1, //IE\n      presto: u.indexOf('Presto') > -1, //opera内核\n      webKit: u.indexOf('AppleWebKit') > -1, //苹果、谷歌内核\n      gecko: u.indexOf('Gecko') > -1 && u.indexOf('KHTML') == -1,//火狐内核\n      mobile: !!u.match(/AppleWebKit.*Mobile.*/), //是否为移动终端\n      ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端\n      android: u.indexOf('Android') > -1 || u.indexOf('Linux') > -1, //android终端或者uc浏览器\n      iPhone: u.indexOf('iPhone') > -1, //是否为iPhone或者QQHD浏览器\n      iPad: u.indexOf('iPad') > -1, //是否iPad\n      webApp: u.indexOf('Safari') == -1, //是否web应该程序，没有头部与底部\n      weixin: u.toLowerCase().match(/MicroMessenger/i) == 'micromessenger', //是否微信\n      qq: u.match(/\\sQQ/i) == \" qq\" //是否QQ\n    };\n  }()\n};\n\n\nconst bridge = (handle, body) => {\n  console.log(handle, body);\n  if (browser.versions.ios) {\n    window.webkit.messageHandlers[handle].postMessage({content: body});\n  }\n  if (browser.versions.android) {\n    window.test[handle](body)\n  }\n}\n\nexport default bridge\n","/**\n * Created by Administrator on 2018/12/5.\n */\n\nimport EVT from 'evtjs';\nimport bridge from './bridge'\n\nconst toStringify = (body) => {\n  if (typeof body !== 'string') {\n    return JSON.stringify(body)\n  }else{\n    return body\n  }\n}\n\nconst toJson= (body) => {\n  if (typeof body !== 'string') {\n    return body\n  }else{\n    return JSON.parse(body)\n  }\n}\n\n\n\nwindow.randomPrivateKey = async () => {\n  let key = toStringify(await EVT.EvtKey.randomPrivateKey())\n  bridge('randomPrivateKeyCallback',key)\n}\n\nwindow.privateToPublic = (privateKey) => {\n  let publicKey = toStringify(EVT.EvtKey.privateToPublic(privateKey))\n  bridge('privateToPublicCallback',publicKey)\n}\n\nwindow.seedPrivateKey = (seed) => {\n  let privateKey = toStringify(EVT.EvtKey.seedPrivateKey(seed))\n  bridge('seedPrivateKeyCallback',privateKey)\n}\n\nwindow.isValidPrivateKey = (key) => {\n  let privateKey = toStringify(EVT.EvtKey.isValidPrivateKey(key))\n  bridge('isValidPrivateKeyCallback',privateKey)\n}\n\nwindow.isValidPublicKey = (key) => {\n  let publicKey = toStringify(EVT.EvtKey.isValidPublicKey(key))\n  bridge('isValidPublicKeyCallback',publicKey)\n}\nwindow.isValidAddress = (address) => {\n  let body = toStringify(EVT.EvtKey.isValidAddress(address))\n  bridge('isValidAddressCallback',body)\n}\nwindow.random32BytesAsHex = async () => {\n  let body = toStringify(await EVT.EvtKey.random32BytesAsHex())\n  bridge('random32BytesAsHexCallback',body)\n}\nwindow.randomName128 = async () => {\n  let body = toStringify(await EVT.EvtKey.randomName128())\n  bridge('randomName128Callback',body)\n}\nwindow.getNullAddress = () => {\n  let body = toStringify(EVT.EvtKey.getNullAddress(address))\n  bridge('getNullAddressCallback',body)\n}\n\n\n//apiCaller\n\nlet apiCaller = null\n\nwindow.needPrivateKeyResponse = null\n\nwindow.EVTInit = () => {\n  const network = {\n    host: 'mainnet14.everitoken.io',\n    port: 443,\n    protocol: 'https'\n  };\n  apiCaller = EVT({\n    endpoint: network,\n    keyProvider: () => {\n      return new Promise((res, rej) => {\n        window.needPrivateKeyResponse = res\n        bridge('needPrivateKey','')\n        //res('5JrNgyyNDqz2pikijgdJwUktV8xkS7JPPSURr2YwxkhKPzm2eRi');\n      });\n    }\n  });\n\n}\n\nwindow.getInfo = async () => {\n  let info = toStringify(await apiCaller.getInfo())\n  bridge('getInfoCallback',info)\n}\n\nwindow.getHeadBlockHeaderState = async () => {\n  let body = toStringify(await apiCaller.getHeadBlockHeaderState())\n  bridge('getHeadBlockHeaderStateCallback',body)\n}\nwindow.getOwnedTokens = async (publicKeys) => {\n  let body = toStringify(await apiCaller.getOwnedTokens(publicKeys))\n  bridge('getOwnedTokensCallback',body)\n}\n\nwindow.getManagedGroups = async (publicKeys) => {\n  let body = toStringify(await apiCaller.getManagedGroups(publicKeys))\n  bridge('getManagedGroupsCallback',body)\n}\nwindow.getCreatedDomains = async (publicKeys) => {\n  let body = toStringify(await apiCaller.getCreatedDomains(publicKeys))\n  bridge('getCreatedDomainsCallback',body)\n}\nwindow.getCreatedFungibles = async (publicKeys) => {\n  let body = toStringify(await apiCaller.getCreatedFungibles(publicKeys))\n  bridge('getCreatedFungiblesCallback',body)\n}\nwindow.getActions = async (params) => {\n  let body = toStringify(await apiCaller.getActions(params))\n  bridge('getActionsCallback',body)\n}\nwindow.getToken = async (domain, id) => {\n  let body = toStringify(await apiCaller.getToken(domain, id))\n  bridge('getTokenCallback',body)\n}\nwindow.getFungibleBalance = async (address) => {\n  let body = toStringify(await apiCaller.getFungibleBalance(address))\n  bridge('getFungibleBalanceCallback',body)\n}\nwindow.getTransactionDetailById = async (id) => {\n  let body = toStringify(await apiCaller.getTransactionDetailById(id))\n  bridge('getTransactionDetailByIdCallback',body)\n}\nwindow.getDomainDetail = async (name) => {\n  let body = toStringify(await apiCaller.getDomainDetail(name))\n  bridge('getDomainDetailCallback',body)\n}\nwindow.getGroupDetail = async (name) => {\n  let body = toStringify(await apiCaller.getGroupDetail(name))\n  bridge('getGroupDetailCallback',body)\n}\nwindow.getFungibleActionsByAddress = async (symbolId, address, skip, take) => {\n  let body = toStringify(await apiCaller.getFungibleActionsByAddress(symbolId, address, [skip = 0], [take = 10]))\n  bridge('getFungibleActionsByAddressCallback',body)\n}\nwindow.getTransactionsDetailOfPublicKeys = async (publickeys, skip, take) => {\n  let body = toStringify(await apiCaller.getTransactionsDetailOfPublicKeys(publickeys, [skip], [take = 10]))\n  bridge('getTransactionsDetailOfPublicKeysCallback',body)\n}\nwindow.getFungibleSymbolDetail = async (sym_id) => {\n  let body = toStringify(await apiCaller.getFungibleSymbolDetail(sym_id))\n  bridge('getFungibleSymbolDetailCallback',body)\n}\nwindow.getRequiredKeysForSuspendedTransaction = async (proposalName, availableKeys) => {\n  let body = toStringify(await apiCaller.getRequiredKeysForSuspendedTransaction(proposalName, availableKeys))\n  bridge('getRequiredKeysForSuspendedTransactionCallback',body)\n}\nwindow.getStatusOfEvtLink = async (options) => {\n  options = toJson(options)\n  let body = toStringify(await apiCaller.getStatusOfEvtLink(options))\n  bridge('getStatusOfEvtLinkCallback',body)\n}\nwindow.getSuspendedTransactionDetail = async (proposalName) => {\n  let body = toStringify(await apiCaller.getSuspendedTransactionDetail(proposalName))\n  bridge('getSuspendedTransactionDetailCallback',body)\n}\n\n\nwindow.getEstimatedChargeForTransaction = async (newdomain,json,config) => {\n  json = toJson(json)\n  config = toJson(config)\n  let body\n  if(config){\n    body = toStringify(await apiCaller.getEstimatedChargeForTransaction(config,\n      new EVT.EvtAction(newdomain,json)\n    ))\n  }else{\n    body = toStringify(await apiCaller.getEstimatedChargeForTransaction(\n      new EVT.EvtAction(newdomain,json)\n    ))\n  }\n  bridge('getEstimatedChargeForTransactionCallback',body)\n}\nwindow.generateUnsignedTransaction = async (newdomain,json,config) => {\n  json = toJson(json)\n  config = toJson(config)\n  let body\n  if(config){\n    body = toStringify(await apiCaller.generateUnsignedTransaction(config,\n      new EVT.EvtAction(newdomain,json)\n    ))\n  }else{\n    body = toStringify(await apiCaller.generateUnsignedTransaction(\n      new EVT.EvtAction(newdomain,json)\n    ))\n  }\n  bridge('generateUnsignedTransactionCallback',body)\n}\nwindow.pushTransaction = async (newdomain,json,config) => {\n  json = toJson(json)\n  config = toJson(config)\n  let body\n  if(config){\n    body = toStringify(await apiCaller.pushTransaction(config,\n      new EVT.EvtAction(newdomain,json)\n    ))\n  }else{\n    body = toStringify(await apiCaller.pushTransaction(\n      new EVT.EvtAction(newdomain,json)\n    ))\n  }\n\n  bridge('pushTransactionCallback',body)\n}\n\n\n\n\n// EvtLink\nwindow.getUniqueLinkId = async () => {\n  let body = toStringify(await EVT.EvtLink.getUniqueLinkId())\n  bridge('getUniqueLinkIdCallback',body)\n}\n\nwindow.getEVTLinkQrImage = (qrType, qrParams, imgParams) => {\n  qrParams = toJson(qrParams)\n  imgParams = toJson(imgParams)\n  let body = EVT.EvtLink.getEVTLinkQrImage(qrType, qrParams, imgParams, (err, res)=>{\n    if (err) {\n      console.log(e.message);\n      return;\n    }\n    bridge('getEVTLinkQrImageCallback',toStringify(res.dataUrl))\n  })\n}\nwindow.parseEvtLink = async (text, options) => {\n  options = toJson(options)\n  let body = toStringify(await EVT.EvtLink.parseEvtLink(text, options))\n  bridge('parseEvtLinkCallback',body)\n}\nwindow.getEvtLinkForEveriPass = async (params) => {\n  params = toJson(params)\n  let body = toStringify(await EVT.EvtLink.getEvtLinkForEveriPass(params))\n  bridge('getEvtLinkForEveriPassCallback',body)\n}\nwindow.getEvtLinkForEveriPay = async (params) => {\n  params = toJson(params)\n  let body = toStringify(await EVT.EvtLink.getEvtLinkForEveriPay(params))\n  bridge('getEvtLinkForEveriPayCallback',body)\n}\nwindow.getEvtLinkForPayeeCode = async (params) => {\n  params = toJson(params)\n  let body = toStringify(await EVT.EvtLink.getEvtLinkForPayeeCode(params))\n  bridge('getEvtLinkForPayeeCodeCallback',body)\n}\n\n\n\n\n\n\n","/**\n * Created by Administrator on 2018/12/6.\n */\nimport bip39 from 'bip39'\nimport bridge from './bridge'\n\nwindow.generateMnemonic = () => {\n  let body = bip39.generateMnemonic(words)\n  bridge('generateMnemonicCallback',body)\n}\n\nwindow.mnemonicToSeedHex = (words) => {\n  let body = bip39.mnemonicToSeedHex(words)\n  bridge('mnemonicToSeedHexCallback',body)\n}\n\nwindow.mnemonicToSeed = (words,password) => {\n  let body\n  if(password){\n    body = bip39.mnemonicToSeed(words,password)\n  }else{\n    body = bip39.mnemonicToSeed(words)\n  }\n  bridge('mnemonicToSeedCallback',body)\n}\n\nwindow.validateMnemonic = (mnemonic) => {\n  let body = bip39.validateMnemonic(mnemonic)\n  bridge('validateMnemonicCallback',body)\n}\n\nwindow.entropyToMnemonic = (str) => {\n  let body = bip39.entropyToMnemonic(str)\n  bridge('entropyToMnemonicCallback',body)\n}\n\nwindow.mnemonicToEntropy = (mnemonic) => {\n  let body = bip39.mnemonicToEntropy(mnemonic)\n  bridge('mnemonicToEntropyCallback',body)\n}\n\n\n\n","import './utils/evtAPI'\nimport './utils/bip39API'\nimport './utils/bridge'\nimport bridge from './utils/bridge'\nimport EVT from 'evtjs';\nimport bip39 from 'bip39'\n\n\nwindow.createEVTWallet = async (password) => {\n  // random 16bytes as hex\n  let entropy = (await  EVT.EvtKey.random32BytesAsHex()).substring(32);\n\n  // uses HEX strings for entropy\n  let mnemoinc = bip39.entropyToMnemonic(entropy);\n\n  let seed = bip39.mnemonicToSeedHex(mnemoinc);\n  let privateKey = await EVT.EvtKey.seedPrivateKey(seed);\n  let publicKey = EVT.EvtKey.privateToPublic(privateKey)\n\n  let json = JSON.stringify({\n    mnemoinc: mnemoinc,\n    privateKey: privateKey,\n    publicKey: publicKey,\n    password: password,\n    type: 'EVT'\n  })\n  bridge('createEVTWalletCallback', json)\n  //console.log(`entropy:${entropy},mnemoinc:${mnemoinc},seed:${seed},key:${key},publicKey:${publicKey}`)\n}\n\nwindow.importEVTWallet = async (mnemoinc,password) => {\n  let seed = bip39.mnemonicToSeedHex(mnemoinc);\n  let privateKey = await EVT.EvtKey.seedPrivateKey(seed);\n  let publicKey = EVT.EvtKey.privateToPublic(privateKey)\n\n  let json = JSON.stringify({\n    mnemoinc: mnemoinc,\n    privateKey: privateKey,\n    publicKey: publicKey,\n    password: password,\n    type: 'EVT'\n  })\n  bridge('importEVTWalletCallback', json)\n  //console.log(`entropy:${entropy},mnemoinc:${mnemoinc},seed:${seed},key:${key},publicKey:${publicKey}`)\n}\n\n\n"],"sourceRoot":""}